generator client {
  provider        = "prisma-client-js"
  output          = "./src/generated/client"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model parent {
  cnic        String        @id @db.VarChar(13)
  firstName   String        @db.VarChar(128)
  lastName    String        @db.VarChar(128)
  email       String        @db.VarChar(128)
  address     String        @db.VarChar(300)
  history     history[]
  meeting     meeting[]
  userlogin   userlogin?
  waitinglist waitinglist[]
}

model admin {
  cnic         String        @id @db.VarChar(13)
  firstName    String        @db.VarChar(128)
  lastName     String        @db.VarChar(128)
  email        String        @db.VarChar(128)
  gender       String        @db.Char(1)
  phone        String        @db.VarChar(13)
  role         String        @db.VarChar(30)
  desgination  String        @db.VarChar(30)
  generalavail Boolean?
  history      history[]
  leave        leave[]
  meeting      meeting[]
  timeslot     timeslot[]
  userlogin    userlogin?
  waitinglist  waitinglist[]
}

model timeslot {
  tsid         Int      @id @default(autoincrement())
  startTime    DateTime @db.Time(6)
  endTime      DateTime @db.Time(6)
  availibility Boolean
  adminId      String   @db.VarChar(13)
  day          String?  @db.VarChar(9)
  leave        leave[]
  meeting      meeting?
  admin        admin    @relation(fields: [adminId], references: [cnic])
}

model student {
  regNo         String          @id @db.VarChar(30)
  firstName     String          @db.VarChar(128)
  lastName      String          @db.VarChar(128)
  email         String          @db.VarChar(128)
  gender        String          @db.Char(1)
  birthdate     DateTime        @db.Date
  studentCnic   String          @db.VarChar(13)
  class         String          @db.VarChar(30)
  section       String          @db.VarChar(30)
  parentId      String?         @db.VarChar(13)
  attendance    attendance[]
  cgpa          cgpa?
  disciplinary  disciplinary[]
  failedsubject failedsubject[]
  history       history[]
  meeting       meeting[]
  userlogin     userlogin?
  waiinglist    waitinglist[]
}

model attendance {
  sid        Int     @id @default(autoincrement())
  subject    String  @db.VarChar(30)
  percentage Int
  regNo      String  @db.VarChar(30)
  student    student @relation(fields: [regNo], references: [regNo])
}

model cgpa {
  id      Int     @id @default(autoincrement())
  cgpa    Float
  regNo   String  @unique @db.VarChar(30)
  student student @relation(fields: [regNo], references: [regNo])
}

model disciplinary {
  id      Int     @id @default(autoincrement())
  actions String  @db.VarChar(300)
  regNo   String  @db.VarChar(30)
  student student @relation(fields: [regNo], references: [regNo])
}

model failedsubject {
  id       Int     @id @default(autoincrement())
  semester String  @db.VarChar(300)
  subject  String  @db.VarChar(30)
  grade    String  @db.Char(2)
  regNo    String  @db.VarChar(30)
  student  student @relation(fields: [regNo], references: [regNo])
}

model meeting {
  mid       Int      @id @default(autoincrement())
  reason    String   @db.VarChar(300)
  status    String   @db.VarChar(30)
  referedTo String   @db.VarChar(30)
  tsid      Int      @unique
  regNo     String   @db.VarChar(30)
  adminId   String   @db.VarChar(13)
  parentId  String   @db.VarChar(13)
  date      DateTime @db.Date
  admin     admin    @relation(fields: [adminId], references: [cnic])
  parent    parent   @relation(fields: [parentId], references: [cnic])
  student   student  @relation(fields: [regNo], references: [regNo])
  timeslot  timeslot @relation(fields: [tsid], references: [tsid])
}

model waitinglist {
  id       Int      @id @default(autoincrement())
  reason   String   @db.VarChar(300)
  date     DateTime @db.Date
  tsid     Int
  regNo    String   @db.VarChar(30)
  adminId  String   @db.VarChar(13)
  parentId String   @db.VarChar(13)
  status   String?  @db.VarChar(50)
  admin    admin    @relation(fields: [adminId], references: [cnic])
  parent   parent   @relation(fields: [parentId], references: [cnic])
  student  student  @relation(fields: [regNo], references: [regNo])
}

model history {
  hid           Int       @id @default(autoincrement())
  date          DateTime  @db.Date
  startTime     DateTime  @db.Time(6)
  endTime       DateTime  @db.Time(6)
  reason        String    @db.VarChar(300)
  status        Status
  referedTo     String    @db.VarChar(30)
  regNo         String    @db.VarChar(30)
  adminId       String    @db.VarChar(13)
  parentId      String    @db.VarChar(13)
  adminFeedback String?   @db.VarChar(128)
  adminRating   Int?
  feedback      feedback?
  admin         admin     @relation(fields: [adminId], references: [cnic])
  parent        parent    @relation(fields: [parentId], references: [cnic])
  student       student   @relation(fields: [regNo], references: [regNo])
}

model userlogin {
  id       Int      @id @default(autoincrement())
  userName String   @db.VarChar(128)
  password String   @db.VarChar(128)
  email    String   @db.VarChar(128)
  role     String   @db.VarChar(30)
  regNo    String?  @unique(map: "unique_regno") @db.VarChar(30)
  adminId  String?  @unique(map: "unique_adminid") @db.VarChar(13)
  parentId String?  @unique(map: "unique_parentid") @db.VarChar(13)
  admin    admin?   @relation(fields: [adminId], references: [cnic], onDelete: NoAction, onUpdate: NoAction, map: "ad_fk")
  parent   parent?  @relation(fields: [parentId], references: [cnic], onDelete: NoAction, onUpdate: NoAction, map: "pr_fk")
  student  student? @relation(fields: [regNo], references: [regNo], onDelete: NoAction, onUpdate: NoAction, map: "st_fk")
}

model feedback {
  attentive  Float?  @db.Real
  polite     Float?  @db.Real
  rude       Float?  @db.Real
  suggestion String  @db.VarChar(128)
  hid        Int     @unique(map: "feedback_pk") @default(autoincrement())
  history    history @relation(fields: [hid], references: [hid], onDelete: NoAction, onUpdate: NoAction, map: "meeting_fk")
}

model leave {
  id       Int       @id(map: "leave_pk") @default(autoincrement())
  date     DateTime? @db.Date
  tsid     Int?
  adminId  String?   @db.VarChar(30)
  admin    admin?    @relation(fields: [adminId], references: [cnic], onDelete: NoAction, onUpdate: NoAction, map: "admin_leave_fk")
  timeslot timeslot? @relation(fields: [tsid], references: [tsid], onDelete: NoAction, onUpdate: NoAction, map: "timeslot_fk")
}

enum Status {
  held
  pending
  completed
}

enum Role {
  Admin
  Parent
  Student
  Director
}
